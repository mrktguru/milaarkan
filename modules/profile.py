from aiogram import types
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import re

from utils.db import save_user_profile, get_user
from geopy.geocoders import Nominatim

geolocator = Nominatim(user_agent="milaarkan_bot")


class ProfileForm(StatesGroup):
    name = State()
    birth_date = State()
    birth_time = State()
    birth_city = State()
    confirm_city = State()


def setup(dp: Dispatcher):

    @dp.callback_query_handler(lambda c: c.data == "menu_profile")
    async def show_profile(callback: types.CallbackQuery):
        user = await get_user(callback.from_user.id)
        if user and all(user[2:6]):
            text = (
                f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                f"–ò–º—è: {user[2]}\n"
                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {user[3]}\n"
                f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {user[4]}\n"
                f"–ì–æ—Ä–æ–¥: {user[5]}"
            )
        else:
            text = (
                "üåø –ß—Ç–æ–±—ã —è –º–æ–≥–ª–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ.\n"
                "–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å."
            )

        keyboard = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å / –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_profile"),
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        await callback.message.edit_text(text, reply_markup=keyboard)

    @dp.callback_query_handler(lambda c: c.data == "edit_profile")
    async def start_profile_edit(callback: types.CallbackQuery, state: FSMContext):
        await state.finish()
        await callback.message.edit_text("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, –±–µ–∑ —Ü–∏—Ñ—Ä.")
        await ProfileForm.name.set()

    @dp.message_handler(state=ProfileForm.name)
    async def fsm_name(message: types.Message, state: FSMContext):
        if not re.match(r"^[–ê-–Ø–∞-—èA-Za-z—ë–Å\s\-]{2,}$", message.text):
            await message.answer("üåø –Ø —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –∏–º—è ‚Äî —ç—Ç–æ —á—Ç–æ-—Ç–æ –±–æ–ª—å—à–µ–µ, —á–µ–º –Ω–∞–±–æ—Ä —Å–∏–º–≤–æ–ª–æ–≤.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –µ–≥–æ –±–µ–∑ —Ü–∏—Ñ—Ä –∏ –∑–Ω–∞–∫–æ–≤.")
            return
        await state.update_data(name=message.text.strip())
        await message.answer("üóì –í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07.04.1992)")
        await ProfileForm.birth_date.set()

    @dp.message_handler(state=ProfileForm.birth_date)
    async def fsm_birth_date(message: types.Message, state: FSMContext):
        if not re.match(r"^\d{2}\.\d{2}\.\d{4}$", message.text):
            await message.answer("üìÖ –ß—Ç–æ–±—ã –≤—Å—ë –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ç–æ—á–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤–æ—Ç —Ç–∞–∫: 07.04.1992")
            return
        await state.update_data(birth_date=message.text.strip())
        await message.answer("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30)")
        await ProfileForm.birth_time.set()

    @dp.message_handler(state=ProfileForm.birth_time)
    async def fsm_birth_time(message: types.Message, state: FSMContext):
        if not re.match(r"^\d{2}:\d{2}$", message.text):
            await message.answer("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 14:30")
            return
        await state.update_data(birth_time=message.text.strip())
        await message.answer("üèô –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è")
        await ProfileForm.birth_city.set()

    @dp.message_handler(state=ProfileForm.birth_city)
    async def fsm_birth_city(message: types.Message, state: FSMContext):
        city = message.text.strip()
        location = geolocator.geocode(city)
        if location:
            await state.update_data(birth_city=city)
            return await save_and_show_profile(message, state)
        else:
            await state.update_data(birth_city=city)
            keyboard = InlineKeyboardMarkup().add(
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="confirm_city"),
                InlineKeyboardButton("üîÅ –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π", callback_data="edit_profile")
            )
            await message.answer(
                "üåç –Ø –Ω–µ –Ω–∞—à–ª–∞ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞?\n"
                "–ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–∞ ‚Äî –Ω–∞–∂–º–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', –∏ —è –¥–æ–≤–µ—Ä—é—Å—å —Ç–µ–±–µ.", reply_markup=keyboard)
            await ProfileForm.confirm_city.set()

    @dp.callback_query_handler(lambda c: c.data == "confirm_city", state=ProfileForm.confirm_city)
    async def fsm_confirm_city(callback: types.CallbackQuery, state: FSMContext):
        await save_and_show_profile(callback.message, state)
        await state.finish()

    async def save_and_show_profile(message: types.Message, state: FSMContext):
        data = await state.get_data()
        await save_user_profile(
            telegram_id=message.from_user.id,
            name=data.get("name"),
            birth_date=data.get("birth_date"),
            birth_time=data.get("birth_time"),
            birth_city=data.get("birth_city")
        )
        text = (
            "üí´ –°–ø–∞—Å–∏–±–æ. –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω.\n\n"
            f"–ò–º—è: {data.get('name')}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_date')}\n"
            f"–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: {data.get('birth_time')}\n"
            f"–ì–æ—Ä–æ–¥: {data.get('birth_city')}"
        )
        keyboard = InlineKeyboardMarkup().add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
        )
        await message.answer(text, reply_markup=keyboard)
