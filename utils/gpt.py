import os
import random
from datetime import datetime
import pytz
from openai import OpenAI
from dotenv import load_dotenv

load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

MAX_LENGTH = 3500

CREATIVE_STYLES = [
    "–ü—É—Å—Ç—å —Ç–æ–Ω –±—É–¥–µ—Ç –∫–∞–∫ –ø–∏—Å—å–º–æ —Å—Ç–∞—Ä—à–µ–π –ø–æ–¥—Ä—É–≥–µ.",
    "–ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—É –≤–æ–¥—ã, –≤–µ—Ç—Ä–∞ –∏–ª–∏ —Å–≤–µ—Ç–∞.",
    "–î–æ–±–∞–≤—å —Ñ—Ä–∞–∑—É, –∫–æ—Ç–æ—Ä–∞—è –∑–≤—É—á–∏—Ç –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ.",
    "–í –∫–æ–Ω—Ü–µ ‚Äî –º—è–≥–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç.",
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –ø–∏—à–µ—à—å —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –≤–µ—Ä–∏—Ç –≤ –≥–æ—Ä–æ—Å–∫–æ–ø—ã ‚Äî –Ω–æ –∏—â–µ—Ç –∑–Ω–∞–∫.",
]

TENSION_STYLES = [
    "–°–¥–µ–ª–∞–π –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ç–æ–º, —á—Ç–æ –¥–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–ª–æ–∂–Ω—ã–º.",
    "–î–æ–±–∞–≤—å —Ç–æ–Ω–∫–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ‚Äî –∫–∞–∫ –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ –≤–Ω—É—Ç—Ä–∏ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –±—ã—Ç—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ.",
    "–ü–æ–∑–≤–æ–ª—å —Å–µ–±–µ —á—É—Ç—å –±–æ–ª—å—à–µ —Ç—Ä–µ–≤–æ–≥–∏ –≤ —Å–ª–æ–≤–∞—Ö, –Ω–æ –Ω–µ —Ç–µ—Ä—è—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞.",
    "–ü—É—Å—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø –∑–≤—É—á–∏—Ç –∫–∞–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–µ–¥—á—É–≤—Å—Ç–≤–∏–µ ‚Äî —á—Ç–æ –Ω–µ –≤—Å—ë –±—É–¥–µ—Ç –ª–µ–≥–∫–æ.",
    "–ù–∞–º–µ–∫–Ω–∏, —á—Ç–æ —ç–Ω–µ—Ä–≥–∏—è –¥–Ω—è —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏.",
]


def get_current_period_text() -> tuple[str, str]:
    tz = pytz.timezone("Europe/Moscow")
    now = datetime.now(tz)
    if now.hour >= 20:
        return "–∑–∞–≤—Ç—Ä–∞", "–°–¥–µ–ª–∞–π –µ–≥–æ –Ω–µ–º–Ω–æ–≥–æ –∫–æ—Ä–æ—á–µ ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –Ω–æ —Å –≥–ª—É–±–∏–Ω–æ–π (–¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤)"
    return "—Å–µ–≥–æ–¥–Ω—è", "–°–¥–µ–ª–∞–π –≥–æ—Ä–æ—Å–∫–æ–ø –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º ‚Äî –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 700 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–æ —ë–º–∫–æ –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ"


async def generate_horoscope_for_sign(
    sign: str,
    period: str = "auto",
    personal: bool = False,
    name: str = None
) -> list[str]:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º "—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞"
    if period == "auto":
        day_text, length_hint = get_current_period_text()
    else:
        day_text = period
        length_hint = ""

    model = "gpt-4-turbo" if personal else "gpt-3.5-turbo"
    creative_hint = random.choice(CREATIVE_STYLES)

    # üî• 20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–∏—Ç—å "—Ç—Ä–µ–≤–æ–∂–Ω—ã–π —Å—Ç–∏–ª—å"
    tension_hint = ""
    if random.random() < 0.2:
        tension_hint = "\n" + random.choice(TENSION_STYLES)

    if personal and name:
        salutation = f"–¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {name}"
    else:
        salutation = f"–¥–ª—è –∑–Ω–∞–∫–∞ {sign}"

    prompt = (
        f"–¢—ã ‚Äî –ú–∏–ª–∞ –ê—Ä–∫–∞–Ω, –∞—Å—Ç—Ä–æ–ª–æ–≥ –∏ –ø—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å 10-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.\n"
        f"–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ—Å–∫–æ–ø {salutation} –Ω–∞ {day_text}.\n\n"
        f"{length_hint}\n"
        "–ü–∏—à–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∏–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤. –°—Ç–∏–ª—å ‚Äî —Ç—ë–ø–ª—ã–π, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–Ω—ã–π.\n"
        f"{creative_hint}"
        f"{tension_hint}"
    )

    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.95,
        max_tokens=1000
    )

    content = response.choices[0].message.content.strip()
    return split_text_safe(content)


def split_text_safe(text: str) -> list[str]:
    chunks = []
    while text:
        if len(text) <= MAX_LENGTH:
            chunks.append(text)
            break
        split_pos = text.rfind("\n", 0, MAX_LENGTH)
        if split_pos == -1:
            split_pos = MAX_LENGTH
        chunks.append(text[:split_pos].strip())
        text = text[split_pos:].strip()
    return chunks
